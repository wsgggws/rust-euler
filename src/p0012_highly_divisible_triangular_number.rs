// Highly divisible triangular number
// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

struct TriangleNumber {
    sum: u64,
    next_num: u64,
}

impl TriangleNumber {
    fn new() -> Self {
        Self {
            sum: 0,
            next_num: 1,
        }
    }
}

impl Iterator for TriangleNumber {
    type Item = u64;
    fn next(&mut self) -> Option<Self::Item> {
        self.sum = self.sum + self.next_num;
        self.next_num = self.next_num + 1;
        Some(self.sum)
    }
}

pub struct Solution {}

impl Solution {
    pub fn highly_divisible_triangular_number(divisors_nums: usize) -> u64 {
        if divisors_nums == 1 {
            return 1;
        }
        TriangleNumber::new()
            .filter(|&num| Solution::whether_divisors_greater_than(num, divisors_nums))
            .take(1)
            .next()
            .unwrap()
    }

    fn whether_divisors_greater_than(num: u64, divisors_nums: usize) -> bool {
        // 暴力破解时注意求解因子数量里sqrt的优化
        (1..(num as f64).sqrt().ceil() as u64)
            .filter(|&x| num % x == 0)
            .count() * 2 >= divisors_nums
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn highly_divisible_triangular_number_test() {
        assert_eq!(Solution::highly_divisible_triangular_number(1), 1);
        assert_eq!(Solution::highly_divisible_triangular_number(2), 3);
        assert_eq!(Solution::highly_divisible_triangular_number(4), 6);
        assert_eq!(Solution::highly_divisible_triangular_number(5), 28);
        assert_eq!(Solution::highly_divisible_triangular_number(50), 25200);
        assert_eq!(Solution::highly_divisible_triangular_number(100), 73920);
        assert_eq!(Solution::highly_divisible_triangular_number(500), 76576500);
    }
}
